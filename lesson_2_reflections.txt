Now that you have your workspace set up, what do you want to try using Git for?

Basically, everything I can think of.  This file, for one.  Probably not necessary, but it's good practice, I guess.

I also have a lot of work related items that could benefit from it. 



How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is different from the working directory and repository is it's not a physical location on the
computer, it's more of a status for files.   Adding and removing files from the staging area doesn't actually affect
the files themselves.  It's useful in that putting something in the staging area allows you to see what your commit is
going to look like before it happens, and lets you make any changes before anything is set in stone.  Also, you can 
add files as you got through the logical change you're making to keep track of what you've done.



How can you use the staging area to make sure you have one commit per logical change?

If you've made multiple logical changes that are each in separate files, you can stage just the files for a certain 
change, commit, then stage and commit the other item.



What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When creating a complex new feature, or a wholesale change to the way a program works, having the incremental changes
you make along the way being separate from the master/main branch help you keep track of what you're doing for that
change, and keeps them separate from changes other people might be making.



How do the diagrams help you visualize the branch structure?

From a basic level, they let you know which commits are tied to which branch(es).  Also, they allow you to see if there
are any unreachable commits, which helps prevent data loss.



What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging will take the commits referred to by the branches being merged and create a new commit, setting the two other
commits as its parents.  It will then take the new commit and label it with the checked out branch.

It's represented in that way because the child-parent structure doesn't change, even though the log makes it seem as
though it has.