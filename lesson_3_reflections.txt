When would you want to use a remote repository rather than keeping all your work local?

For one, if you plan on collaborating with anyone else, having a central location accessible by anyone seems like a 
necessity.  Trying to manage distributing the local repository amongst the contributing individuals manually seems 
like excessive effort.

Another situation is if you use more than one computer to do your work.  Being able to have a single place to 
coordinate your changes makes keeping track of things significantly easier.

Then there's the general advantage of having a copy of your work offsite in case something unfortunate happenes to 
your computer.  Never hurts to have a backup.



Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your 
remote repository?

If you're in the middle of working on a particular file, and git decides to pull changes, there are a few potential 
problems.

The first being that it may add changes to code you were relying on being a certain way.  If it all of the sudden 
changed without you noticing, it would likely cause your program to not work properly.

Another issue is that if you have a file open in an editor, and git tries to pull a new version of that file, since 
it's open, the system won't allow it to be updated, causing a conflict.

Lastly, consider if someone updated the remote with code that contained a bug, which was then automatically pulled to 
your local repo.  If you were attempting to add a feature or change something, you may mistakenly think the bug was 
the result of your changes, and not the automatically pulled changes.  This could waste time with you looking in the 
wrong place for the source of the bug.



Describe the differences between forks, clones, and branches. When would you use one instead of another?

A fork is something specific to Github (and similar sites), where you clone someone else's repository to your 
account.  This allows you to create your own version, which maintaining attribution for who created the original.  You 
would use this when the changes you want to make don't line up with the original project's plans, but you still want 
to run with your ideas.

A clone is essentially copying a git repository to a new location with full commit history intact.  You would want to 
do this when you were going to work on a project that is hosted somewhere else.  You create your own version, work on 
it, then submit your changes back into it.

A branch is a logical way to compartmentalize commits.  It's basically a moving label that allows you to keep track of 
a history of work and changes that are specific to one thing.  You would use a branch when you begin to make a change 
that was large in scope that might consist of several individual logical changes (commits).



What is the benefit of having a copy of the last known state of the remote stored locally?

If you were going to be away from an Internet connection for a while, having access to what's been going on with the 
remote might help you plan your changes more accordingly.  Also, it allows you to account for any merge conflicts as 
you go.

Another benefit is having a clear path back to a (theoretically) known good state, just in case your work needs to be 
scrapped for whatever reason.
